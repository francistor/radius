/**
    user.<variable> = cooked attribute
    user.tmp.<variable> = for short term processing
    user.provClient = read from file or database

    If configured permissiveService, user is not rejected if not found
    
**/

startAll:

    // Service Definition
    if $request.Service-Type == "Outbound-User" then 
        goto serviceRequest; 
    endif;

    /* Normalize request data. Common for all client types */
    $user.userName := $request.User-Name->trim()->toLower();
    $user.acctSessionId := $request.Acct-Session-Id->trim();
    $user.realm := $packet.User-Realm->toLower();
    $user.mac-address := $request.HW-User-MAC | $request.Unisphere-PPPoE-Description->substring(6) | $request.Alc-Client-Hardware-Addr;
    $user.nasPort := $request.NAS-Port;
    $user.nasIPAddress := $request.NAS-IP-Address;

    /* Read configuration */
    /* Precedence for user.config is Global -> Domain -> Client */

    // Global
    invoke ReadPropertyFile with
        Filename => "conf/Global.txt",
        Map => """
            $user.config.* := $*;
            $user.reply.global.radiusAttrs.* := $radiusAttrs;
            $user.reply.global.nonOverridableRadiusAttrs.* := $nonOverridableRadiusAttrs;
        """
    endinvoke

    // Domain
    invoke ReadUserFile with
        Text => "@conf/DomainConfig.txt",
        SearchKey => $user.realm,
        Map => """
            $user.config.* := $check.*;
            $user.reply.realm.radiusAttrs.* := $reply.radiusAttrs.*;
            $user.reply.realm.nonOverridableRadiusAttrs.* := $reply.nonOverridableRadiusAttrs.*;
        """
    endinvoke

    // client
    $user.config.* := $client.*;

    /* Detect client type */
    if $request.Unisphere-DHCP-MAC-Address->exists() | $request.Unisphere-PPPoE-Description->exists() then
        $user.radiusClientType := "MX";
    elsif $request.Alc-Client-Hardware-Addr->exists() then
        $user.radiusClientType := "ALU";
    elsif $request.HW-User-MAC->exists() then
        $user.radiusClientType := "HUAWEI";
    else 
        $user.radiusClientType := "DEFAULT";
    endif;

    // Get NAS-IP-Address and NAS-PORT
    $user.nasPort := $request.NAS-Port;
    $user.nasIPAddress := $request.NAS-IP-Address;
    // Override if necessary
    if $user.radiusClientType == "HUAWEI" | $user.radiusClientType == "MX" then
        // NAS-Port-Id <dslam-ip>:<svlan>-<cvlan>
        // Used in Chile. NAS-Port is calculated using the vlan values and NAS-IP-Address is that ot the DSLAm as reported in NAS-Port-Id
	    if $request.NAS-Port-Id matches #/^([0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+):(([0-9]+)-)?([0-9]+)$/ then
            $user.tmp.pseudo-nas-ip := $match.1;
            $user.tmp.svlan := $match.3;
            $user.tmp.cvlan := $match.4;
            $user.nasPort := $user.tmp.cvlan|0 + ($user.tmp.svlan|0)*4096;
            $user.nasIPAddress := $user.tmp.pseudo-nas-ip;
        endif;
    endif;


    // Smart-Edge not implemented
    // Alu does not need any cooking

    if $packet.Packet-Type == "Accounting-Request" then goto accountingRequest;
    elsif $packet.Packet-Type == "Access-Request" then
        // Prepaid request
        if $request.HW-Service-Info matches #/N([-_0-9a-zA-Z]+)/ then
            $user.serviceName := $match.1;
            log "Prepaid request" & $user.serviceName, level => warning;
            goto prepaidRequest;
        endif;
    endif;

accessRequest:

    // SendReject undefined of true should reject the request and rejectService not applied
    if(($user.config.sendReject->exists()) || $user.config.SendReject == true) then 
        delete $user.config.rejectService; 
    endif;

    log level => debug, "blockingServiceOption: " & $user.config.blockingServiceName & ", blockingIsAddon: " & $user.confog.blockingIsAddon & ", permissiveServiceNameOption: " & $user.config.permissiveServiceNameOption & ", sendReject: " & $user.config.sendReject & ", rejectServiceNameOption: " & $user.config.rejectServiceNameOption & ", rejectIsAddon: " & $user.config.rejectIsAddon & ", rejectFilterOption: " & $user.config.rejectFilterOption & ", acceptOnProxyError: " & $user.config.acceptOnProxyError & ", authLocalOption: " & $user.config.authLocalOption;

    if($user.config.provisionType == "database") then 
        goto provisionDatabase;
    elsif($user.config.provisionType == "file") then
        goto provisionFile;
    else goto provisionContinue;
    endif;

provisionDatabase:
    // Get the client data
    invoke Jdbc with
        Driver => "org.postgresql.Driver",
        Url => "jdbc:postgresql://localhost:5432/radius",
        User => "psa",
        Password =>"psa",
        Statement => "select UserName, Password, SERVICE_NAME as ServiceName, OPC_CL_INFO_09 as AddonServiceName, LEGACY_CLIENT_ID as LegacyClientId, BLOCKING_STATE as Status, OPC_CL_INFO_03 as overrideServiceName, OPC_CL_INFO_04 as overrideAddonServiceName, ip_address, ipv6_delegated_prefix, usability  from ServicePlan SP, Client CLI, UserLine UL where CLI.CLIENT_ID=UL.CLIENT_ID AND UL.NASIP_ADDRESS=? and UL.NASPORT=? AND CLI.PLAN_NAME=SP.PLAN_NAME",
        BindMap => """
            ${1}=${user.nasIPAddress};
            ${2[INTEGER]}=${user.nasPort};
        """,
        ResultMap => """
            $user.provClient.userName := $1;
            $user.provClient.password := $2;
            $user.provClient.basicServiceName := $3;
            $user.provClient.addonServiceName := $4;
            $user.provClient.legacyClientId := $5;
            $user.provClient.status := $6;
            $user.provClient.overrideBasicServiceName := $7;
            $user.provClient.overrideAddonServiceName := $8; 
            $user.provClient.ipAddress := $9;  
            $user.provClient.delegatedIPv6Prefix := $10;  
            $user.provClient.usability := $11;             
        """
        on success
            log level => debug, "User found. Id: " & $user.provClient.legacyClientId & ", serviceName: " & $user.provClient.basicServiceName;
            goto provisionContinue;
        on failure
            // Client not found
            log level => debug, "Client NOT found";
            if($user.config.permissiveServiceName->exists()) then
                $user.provClient.basicServiceName := $user.config.permissiveServiceName;
            else
                $user.rejectMessage := "Client not provisioned";
            endif;
            goto provisionContinue;
        on error
            log level => error, "Client database access error";
            return error;
    endinvoke

provisionFile:
    invoke ReadUserFile with
        Text => "@conf/SpecialUsers.txt",
        SearchKey => $user.userName,
        Map => """
            $user.provClient.userName := $user.userName;
            $user.provClient.password := $check.password;
            $user.provClient.basicServiceName := $check.basicServiceName;
            $user.provClient.addonServiceName := $check.addonServiceName;
            $user.provClient.legacyClientId := $check.legacyClientId;
            $user.provClient.status := $check.status | 0;
            $user.provClient.overrideBasicServiceName := $check.overrideBasicServiceName;
            $user.provClient.overrideAddonServiceName := $check.overrideAddonServiceName;  
            $user.provClient.ipAddress := $check.ipAddress;  
            $user.provClient.delegatedIPv6Prefix := $check.delegatedIPv6Prefix;  
            $user.provClient.usability := $check.usability;  
        """
    endinvoke

provisionContinue:

    // Local Auth
    if($user.config.authLocal == "provision") then
        $check.password := $user.provClient.password;
    elsif($user.config.authLocal == "file") then
        invoke ReadUserFile with
            Text => "@conf/SpecialUsers.txt",
            SearchKey => $user.userName,
            Map => """
                $check.password := $check.password; 
            """
            on failure
                log level => warning, $user.userName & " not found in SpecialUsers.txt";
                $user.rejectMessage := "Authorization rejected for " & $user.userName;
                delete $user.config.authLocal;
        endinvoke
    endif;

    if($user.provClient.password->exists() && ($user.config.authLocal == "provision" || $user.config.authLocal == "file")) then
        invoke AuthLocal
            on failure
                log level => warning, "AuthLocal Reject. Incorrect password";
                // Just set flag. Do not reject yet
                $user.rejectMessage := "Authorization rejected for " & $user.userName;
                goto composeServices;
        endinvoke
    endif;

composeServices:

    // Set service names before possible reject
    if($user.config.overrideServiceName->exists()) then
        // realm overrideServiceName has highest priority and does not allow addon
        $user.serviceName := $user.config.overrideServiceName;
    elsif($user.provClient.status == 2) then
        if($user.config.blockingIsAddon | false) then
            // Blocking with addon
            $user.serviceName := $user.provClient.basicServiceName;
            $user.addonServiceName := $user.config.blockingServiceName;
        else
            // Blocking as basic service
            $user.serviceName := $user.config.blockingServiceName;
        endif;
    else
        // Regular service, could be overriden as found in client repository
        $user.serviceName := $user.provClient.overrideBasicServiceName | $user.provClient.basicServiceName;
        $user.addonServiceName := $user.provClient.overrideAddonServiceName | $user.provClient.addonServiceName;
    endif;

    // Do proxy if configured and no previous reject
    if(!($user.rejectMessage->exists()) && ($user.config.inlineProxyGroupName->exists() && $user.config.inlineProxyGroupName != "none")) then
        invoke ReadUserFile with
            Text => "@conf/ProxyGroups.txt",
            SearchKey => $user.config.inlineProxyGroupName,
            Map => """
                $user.proxyGroup.* := $check.*;
                $user.proxyGroup.IPAddress := $check.IPAddress->toList(",");
            """
        endinvoke

        invoke Failover with
            CacheName => "proxy-status",
            ListVariables => "user.proxyGroup.IPAddress",
            Method => proxyAuth,
            SortOrder => $user.proxyGroup.SortOrder | "NATURAL",
            ClearOnNoChoice => $user.proxyGroup.ClearOnNoChoice | true,
            DisabledTimeout => $user.proxyGroup.QuarantineTime | 3m,
            ErrorThreshold => $user.proxyGroup.MaxErrors | 5,
            Retries => count( $user.proxyGroup.IPAddress ) - 1,
            SuccessMap => """
                $user.reply.proxy := $inner.reply.*;
                $user.rejectMessage := $inner.user.rejectMessage;
                $user.proxyReplyMessage := $inner.user.proxyReplyMessage;
            """
            on error
                log level => warning, "No answer from " & $user.config.ProxyGroupName;
                // TODO: check what to do here
        endinvoke
    endif;


    // Process reject
    if($user.rejectMessage->exists()) then
        $reply.Reply-Message := $user.rejectMessage;
        if($user.config.rejectServiceName->exists() && ($user.config.sendReject == "no" || ($user.config.sendReject == "filter" && $user.proxyReplyMessage->containsString($user.config.rejectFilter)))) then
            $reply.Class += "R=1";
            if($user.config.rejectIsAddon | false) then
                $user.addonServiceName := $user.config.rejectServiceName;
            else
                $user.serviceName := $user.config.rejectServiceName;
                delete $user.addonServiceName;
            endif;
        else 
            goto rejectRequest;
        endif;
    endif;

    /* Read Service configuration */
    invoke ReadUserFile with
        Text => "@conf/ServiceConfig.txt",
        SearchKey => $user.serviceName,
        Map => """
            $user.reply.basic.radiusAttrs.* := $reply.radiusAttrs.*;
            $user.reply.basic.nonOverridableRadiusAttrs.* := $reply.nonOverridableRadiusAttrs.*;
        """
    endinvoke

    /* Read addon Service configuration */
    if($user.addonServiceName->exists()) then
        invoke ReadUserFile with
            Text => "@conf/ServiceConfig.txt",
            SearchKey => $user.addonServiceName,
            Map => """
                $user.reply.addon.radiusAttrs.* := $reply.radiusAttrs.*;
                $user.reply.addon.nonOverridableRadiusAttrs.* := $reply.nonOverridableRadiusAttrs.*;
            """
        endinvoke
    endif;

    /* Compose Response */
    // TODO: Filter proxy response
    $reply.Reply-Message := $user.rejectMessage;
    $reply.* += $user.reply.proxy.*;
    $reply.* += $user.reply.addon.nonOverridableRadiusAttrs.*;   
    $reply.* += $user.reply.basic.nonOverridableRadiusAttrs.*;       
    $reply.* += $user.reply.realm.nonOverridableRadiusAttrs.*;  
    $reply.* += $user.reply.global.nonOverridableRadiusAttrs.*;   
    $reply.* ?= $user.reply.addon.radiusAttrs.*;   
    $reply.* ?= $user.reply.basic.radiusAttrs.*;       
    $reply.* ?= $user.reply.realm.radiusAttrs.*;  
    $reply.* ?= $user.reply.global.radiusAttrs.*;  

    $reply.Class += "S:" & $user.serviceName;
    $reply.Class += "C:" & ($user.provClient.legacyClientId | "not-found");

    if($user.addonServiceName->exists()) then
        $reply.Class += "A:" & $user.addonServiceName;
    endif;

    if($user.provClient.ipAddress->exists()) then
        $reply.Framed-IP-Address := $user.provClient.ipAddress;
    endif;

    if($user.provClient.delegatedIpv6Prefix->exists()) then
        $reply.Delegated-IPv6-Prefix := $user.provClient.delegatedIPv6Prefix;
    endif;

    return success;

rejectRequest:
    $reply.Reply-Message := $user.rejectMessage;
    return reject;

prepaidRequest:

    /* Get the client credit */
    $reply.HW-Remanent-Volume = 1000;

    return success;

serviceRequest:

    invoke ReadUserFile with
        Text => "@conf/ServiceRemoteDefinition.txt",
        SearchKey => $request.User-Name,
        Map => """
            $reply.* := $reply.*;
        """
    endinvoke

    return success;


proxyAuth:

    invoke Radius with
        ServerAddress => $user.proxyGroup.IPAddress & ":" & $user.proxyGroup.AuthPort,
        Secret => $user.proxyGroup.Secret,
        Timeout => $user.proxyGroup.Timeout,
        Retries => $user.proxyGroup.Retries,
        PacketType => $packet.Packet-Type,
        RequestMap => "@${user.config.authProxyFilterOut}",
        SuccessMap => "@${user.config.authProxyFilterIn}",
        FailureMap => """
            log level => warning, $user.userName & " Rejected by proxy server with " & $Reply-Message;
            $user.rejectMessage := "Rejected by proxy: " & $Reply-Message;
            $user.proxyReplyMessage := $Reply-Message;
        """
        on failure
            // Turn into success
            return success;
    endinvoke

    return success;


accountingRequest:

    // Get Service-Name
    // TODO: Add Cisco Cisco-AVPair=serviceName=<value>. If internet, then take Cico-AVPair=echo-string-1=<value>
    if($request.HW-Service-Info->exists()) then
        $user.serviceName := $request.HW-Service-Info->substring(1);
    elsif $request.Alu-Sub-Serv-Activate->exists() then
        $user.serviceName := $request.Alu-Sub-Serv-Activate;
    elsif $client.client-class == "SRC" then
        $user.serviceName := $request.Class;
    endif;

    // This could be more complex, both isServiceAccount and isSesssionAccounting being true
    if $user.serviceName->exists() then
        $user.isSessionAccounting := false;
        $user.isServiceAccounting := true;
    else
        $user.isSessionAccounting := true;
        $user.isServiceAccounting := false;
    endif;

    // Build syntethic attributes
    $request.PSA-ServiceName := $user.serviceName;
    foreach $temp.ClassPair in $request.Class loop
        if $temp.ClassPair matches #/([A-Z]):([-_0-9a-zA-Z]+)/ then 
            if $match.1 == "C" then 
                $request.PSA-LegacyClientId := $match.2;
            endif;
        endif;
    endloop;

    // TODO: Read service config
    if $user.isServiceAccounting then
        invoke ReadUserFile with
            Text => "@conf/ServiceConfig.txt",
            SearchKey => $user.serviceName,
            Map => """
                $user.config.* := $check.*;
            """
        endinvoke
    endif;

    // Write Session CDR to file
    if ($user.isSessionAccounting && $user.config.writeSessionCDR) then
        foreach $temp.sessionCDRDir in $user.config.sessionCDRDirectories->toList(LS) loop
            if $temp.sessionCDRDir.checkerName -> exists() && ! (evalfunc psa_checkers::$temp.sessionCDRDir.checkerName () )then
                log level => debug, "Checker retunrs false";
            else
                invoke WriteDetailFile with
                    Filename => "'" & ${temp.sessionCDRDir.path} & "'" & ${temp.sessionCDRDir.fileNamePattern},
                    FilenameExtension => ${temp.sessionCDRDir.extension},
                    RolloverMode => Custom,
                    IdleTime => 200,
                    LogInterim => true
                endinvoke
            endif;
        endloop;
    endif;

    // Write Service CDR to file
    if ($user.isServiceAccounting && $user.config.writeServiceCDR) then
        foreach $temp.serviceCDRDir in $user.config.serviceCDRDirectories->toList(LS) loop
            if $temp.serviceCDRDir.checkerName -> exists() && ! (evalfunc psa_checkers::$temp.serviceCDRDir.checkerName () )then
                log level => debug, "Checker retunrs false";
            else
                invoke WriteDetailFile with
                    Filename => "'" & ${temp.serviceCDRDir.path} & "'" & ${temp.serviceCDRDir.fileNamePattern},
                    FilenameExtension => ${temp.serviceCDRDir.extension},
                    RolloverMode => Custom,
                    IdleTime => 200,
                    LogInterim => true
                endinvoke
            endif;
        endloop;
    endif;

    // Copy-Proxy
    invoke ReadPropertyFile with
        Filename => "conf/CopyTargets.txt",
        Map => """
            $user.copyTargets := $copyTargets;
        """
    endinvoke

    foreach $user.copyTarget in $user.copyTargets->toList(LS) loop
        if $user.copyTarget.checkerName -> exists() && ! (evalfunc psa_checkers::$user.copyTarget.checkerName () )then
            log level => debug, $user.copyTarget.targetName & " Checker retunrs false";
        else
            invoke Call with
                Method => proxyAcct,
                WriteMap => """
                    $inner.user.radiusProxyGroupName := $user.copyTarget.radiusProxyGroupName;
                    $inner.user.config.acctProxyFilterOut := $user.copyTarget.filterName;
                """,
                CopyMode => true
            endinvoke

        endif;
    endloop;

    // Inline proxy
    if $user.config.inlineProxyGroupName->exists() && !($user.config.inlineProxyGroupName == "none") && (($user.isSessionAccounting && $user.config.proxySessionAccounting) || ($user.isServiceAccounting && $user.config.proxyServiceAccounting)) then
        invoke Call with
            Method => proxyAcct,
            WriteMap => """
                $inner.user.radiusProxyGroupName:= $user.config.inlineProxyGroupName;
            """,
            CopyMode => true
        endinvoke
    else
        log level => debug, "Not doing inline proxy";
    endif;

    return success;


proxyAcct:

    invoke ReadUserFile with
        Text => "@conf/ProxyGroups.txt",
        SearchKey => $user.radiusProxyGroupName,
        Map => """
            $user.proxyGroup.* := $check.*;
            $user.proxyGroup.IPAddress := $check.IPAddress->toList(",");
        """
        endinvoke

    invoke Failover with
        CacheName => "proxy-status",
        ListVariables => "user.proxyGroup.IPAddress",
        Method => singleProxyAcct,
        SortOrder => $user.proxyGroup.SortOrder | "NATURAL",
        ClearOnNoChoice => $user.proxyGroup.ClearOnNoChoice | true,
        DisabledTimeout => $user.proxyGroup.QuarantineTime | 3m,
        ErrorThreshold => $user.proxyGroup.MaxErrors | 5,
        Retries => count( $user.proxyGroup.IPAddress ) - 1,
        on error
            log level => warning, "No answer from " & $user.proxyGroup.IPAddress;
        endinvoke

    return success;

singleProxyAcct:
    log level => warning, "Acct proxy with RequestMap:" & ${user.config.acctProxyFilterOut};
    invoke Radius with
        ServerAddress => $user.proxyGroup.IPAddress & ":" & $user.proxyGroup.AcctPort,
        Secret => $user.proxyGroup.Secret,
        Timeout => $user.proxyGroup.Timeout,
        Retries => $user.proxyGroup.Retries,
        PacketType => $packet.Packet-Type,
        RequestMap => "@${user.config.acctProxyFilterOut}"
    endinvoke

    return success;
